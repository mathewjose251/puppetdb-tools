#!/usr/bin/python

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/puppetdb/puppetdb.json'

#########################################################################
### Declarations ########################################################
#########################################################################

from datetime import datetime, timedelta
import dateutil.parser, dateutil.tz
import json, optparse, re, requests, sys

## this isn't ideal, but until I actually start verifying the cert this
## is the best I can do
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

#########################################################################
### Subroutines #########################################################
#########################################################################

def parseConfig(file):
    """
    Load a json configuration from a configuration file.  Sets a global
    'config' variable.
    """
    global config

    try:
        config = json.load(open(config_file, 'r'))
    except IOError, e:
        print "file error:  %s" % e
        sys.exit (2)
    except Exception, e:
        print "unknown error:  %s" % e
        sys.exit (2)

    return config

def requestCert(url):
    """
    If the URL is https, then we will need to pass config['cert'] and
    config['key'].
    """
    if re.match('^https:', url):
        r = (config['cert'], config['key'])
    else:
        r = ()

    return r

#########################################################################
### main () #############################################################
#########################################################################

def main():
    usage = "%prog [options] [HOSTPATTERN]"
    parseConfig(config_file)

    global p
    p = optparse.OptionParser (usage = usage,
        description = "query puppetdb for system fact values")
    p.add_option ('--debug', dest='debug', action='store_true', default=False)
    p.add_option ('--json', dest='json', action='store_true', default=False)
    p.add_option ('--server', dest='server', default=config['server'],
        help="puppetdb server (default: %default)")
    p.add_option ('--nodes_url_base', dest='nodes_url_base',
        default=config['nodes_url_base'],
        help="relative URL to puppetdb for default node query")
    p.add_option ('--facts_url_base', dest='facts_url_base',
        default=config['facts_url_base'],
        help="relative URL to puppetdb for facts query")

    global opt
    opt, args = p.parse_args()

    if len(args) < 1:
        p.print_help()
        exit (-1)

    if len(args) == 1:
        url = "%s%s/%s" % (opt.server, opt.facts_url_base, args[0])
    else:
        url = "%s%s/%s/%s" % (opt.server, opt.facts_url_base, args[0], args[1])

    headers = {'Accept': 'application/json'}
    try:
        if opt.debug: print url
        r = requests.get(url, headers=headers,
            cert=requestCert(url), verify=False)
        items = []
        for node in r.json():
            if opt.json:
                print node
            else:
                certname = node['certname']
                value    = node['value']
                print "%-35s %-42s" % (certname, value)
    except:
        p.error ('bad json?: %s' % url)


    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-fact - query the puppetdb about a given fact

=head1 SYNOPSYS

B<puppetdb-fact> kernelrelease

B<puppetdb-fact> kernelrelease 2.6.32-431.17.1.el6.x86_64

=head1 USAGE

puppetdb-fact queries the puppetdb facts endpoint to find the values of
the given fact on all nodes; additionally, we can filter by a given value
(no wildcards).

Outputs a list on STDOUT containing the hostname and the fact value.

=head1 OPTIONS

=over 4

=item I<fact>

Fact name.  Required.  No wildcards allowed.

=item I<value>

Fact value.  Optional; if not offered, we won't restrict the search
further.

=item --help

Prints some short help documentation and exits.

=item --json

Prints the output as json instead of text.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2016, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
