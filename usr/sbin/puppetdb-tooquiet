#!/usr/bin/python

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/puppetdb/puppetdb.json'

hours = 24
output_string = "%-30s %23s %23s"

#########################################################################
### Declarations ########################################################
#########################################################################

from datetime import datetime, timedelta
import dateutil.parser, dateutil.tz
import json, optparse, re, requests, sys

## this isn't ideal, but until I actually start verifying the cert this
## is the best I can do
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

#########################################################################
### Subroutines #########################################################
#########################################################################

def parseConfig(file):
    """
    Load a json configuration from a configuration file.  Sets a global
    'config' variable.
    """
    global config

    try:
        config = json.load(open(config_file, 'r'))
    except IOError, e:
        print "file error:  %s" % e
        sys.exit (2)
    except Exception, e:
        print "unknown error:  %s" % e
        sys.exit (2)

    return config

def requestCert(url):
    """
    If the URL is https, then we will need to pass config['cert'] and
    config['key'].
    """
    if re.match('^https:', url):
        r = (config['cert'], config['key'])
    else:
        r = ()

    return r

def hostFact(fact):
    """
    Return a hash of name-to-fact values for a given fact.
    """
    query = "['=', 'name', '%s']" % fact
    try:
        payload = { 'query': json.dumps(eval(query))}
    except SyntaxError:
        p.error('Malformed query, check examples for help')

    headers = {'Accept': 'application/json'}
    try:
        url = "%s%s" % ( config['server'], config['facts_url_base'] )
        r = requests.get(url, headers=headers, params=payload,
            cert=requestCert(url), verify=False)
    except Exception, e:
        p.error('%s (bad json?: %s)' % (e, payload))

    if len(r.json()) == 0:
        return {}

    hash = {}
    for node in r.json():
        name = node['certname']
        hash[name] = node['value']

    return hash

def node_too_old(node, hours):
    """
    Has it been too long since the node has checked in?  Returns True if
    so, False otherwise.

    'node' is a json object; 'hours' is the number of hours that counts
    as "too old".  "Has never checked in" counts as "too long".
    """
    ts = time_from_timestamp(node['report_timestamp'])
    if ts is False: return True

    now = datetime.now(dateutil.tz.tzlocal())
    delta = timedelta(hours=hours)

    diff = now - ts
    if diff > delta: return True
    else:            return False

def node_print(node):
    """
    Create a human-readable string saying how long it's been since a node
    has checked in.
    """
    name = node['name']

    ts = time_from_timestamp(node['report_timestamp'])
    if ts is False: ts_string = "**no puppetdb records**"
    else:           ts_string = ts.strftime("%Y-%m-%d %H:%M:%S %Z")

    if name in roles: role = roles[name]
    else:             role = 'unknown'

    return output_string % (name, ts_string, role)

def time_from_timestamp(timestamp):
    """
    Parse a timestamp with dateutil.parser.parse(), and set to the local
    timezone.  This is still usable for date math.
    """
    if timestamp is None:
        return False

    ts = dateutil.parser.parse(timestamp)
    local = ts.astimezone(dateutil.tz.tzlocal())
    return local

#########################################################################
### main () #############################################################
#########################################################################

def main():
    usage = "%prog [options] [HOSTPATTERN]"
    parseConfig(config_file)

    global p
    p = optparse.OptionParser (usage = usage,
        description = "query puppetdb for hosts that are too quiet")
    p.add_option ('--hours', dest='hours', default=hours, type='int',
        help='how many hours is "too many"?  default: %default')

    global opt
    opt, args = p.parse_args()

    if len(args) < 1:
        host_search = '.*'
    else:
        host_search = args[0]

    query = "['~', ['fact', 'fqdn'], '^%s$']" % host_search
    try:
        payload = { 'query': json.dumps(eval(query))}
    except SyntaxError:
        p.error('Malformed query, check examples for help')

    headers = {'Accept': 'application/json'}
    try:
        nodes_url = "%s%s" % ( config['server'], config['nodes_url_base'] )
        r = requests.get(nodes_url, headers=headers, params=payload,
            cert=requestCert(nodes_url), verify=False)
    except Exception, e:
        p.error('%s (bad json?: %s)' % (e, payload))

    if 'role_fact' in config:
        role_fact = config['role_fact']
    else:
        role_fact = 'role'

    global roles
    roles = hostFact(role_fact)

    items = []
    for node in r.json():
        if node_too_old(node, opt.hours):
            items.append(node_print(node))

    if len(items) > 0:
        for i in items: print i

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-tooquiet - list hosts that haven't checked in recently, or at all

=head1 SYNOPSYS

B<puppetdb-tooquiet>

B<puppetdb-tooquiet> --hours 48

B<puppetdb-tooquiet> cmssrv.\*.fnal.gov --hours 0

=head1 USAGE

puppetdb-tooquiet queries the puppetdb to find out which hosts have not
checked in recently (where 'recently' is defined as 48 hours, though this
is configurable).  The list is printed on STDOUT.

=head1 OPTIONS

=over 4

=item I<HOSTPATTERN>

Default host pattern to match.  Defaults to '.*'; remember that you may
need to escape wild cards if you're using this from the CLI.

=item --hours I<HOURS>

How many hours is too many?  Defaults to 48; set to 0 if you want to list
all hosts and their last checked-in date.

=item --help

Prints some short help documentation and exits.

=back

=head1 TODO

Write a script to send mail based on the contents of this script.

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

Based in part on https://github.com/JHaals/puppetdb-grep

=head1 COPYRIGHT

Copyright 2013-2015, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
