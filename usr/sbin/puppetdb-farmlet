#!/usr/bin/python

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/puppetdb/puppetdb.json'
hours = 4

#########################################################################
### Declarations ########################################################
#########################################################################

from datetime import datetime, timedelta
import dateutil.parser, dateutil.tz
import json, optparse, re, requests, sys

## this isn't ideal, but until I actually start verifying the cert this
## is the best I can do
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

#########################################################################
### Subroutines #########################################################
#########################################################################

def parseConfig(file):
    """
    Load a json configuration from a configuration file.  Sets a global
    'config' variable.
    """
    global config

    try:
        config = json.load(open(config_file, 'r'))
    except IOError, e:
        print "file error:  %s" % e
        sys.exit (2)
    except Exception, e:
        print "unknown error:  %s" % e
        sys.exit (2)

    return config

def requestCert(url):
    """
    If the URL is https, then we will need to pass config['cert'] and
    config['key'].
    """
    if re.match('^https:', url):
        r = (config['cert'], config['key'])
    else:
        r = ()

    return r

#########################################################################
### main () #############################################################
#########################################################################

def main():
    usage = "%prog [options] [HOSTPATTERN]"
    parseConfig(config_file)

    global p
    p = optparse.OptionParser (usage = usage,
        description = "query puppetdb for hosts by zone/role/subrole")
    p.add_option ('--debug', dest='debug', action='store_true', default=False)
    p.add_option ('--server', dest='server', default=config['server'],
        help="puppetdb server (default: %default)")
    p.add_option ('--zone_fact', dest='zone_fact', default='enc_zone',
        help="name of the zone fact (default: %default)")
    p.add_option ('--role_fact', dest='role_fact', default='enc_role',
        help="name of the role fact (default: %default)")
    p.add_option ('--subrole_fact', dest='subrole_fact', default='enc_subrole',
        help="name of the subrole fact (default: %default)")
    p.add_option ('--nodes_url_base', dest='nodes_url_base',
        default=config['nodes_url_base'],
        help="relative URL to puppetdb for default nodes query")

    global opt
    opt, args = p.parse_args()

    search = {}
    if len(args) == 0:
       p.print_help()
       sys.exit(-1)
    elif len(args) <= 3:
       if len(args) >= 1: search['zone']    = args[0]
       if len(args) >= 2: search['role']    = args[1]
       if len(args) >= 3: search['subrole'] = args[2]
    else:
       p.print_help()
       sys.exit(-1)

    try:
        s = []
        if 'zone' in search:
            s.append('["=", ["fact", "%s"], "%s"]' % (opt.zone_fact, search['zone']))
        if 'role' in search:
            s.append('["=", ["fact", "%s"], "%s"]' % (opt.role_fact, search['role']))
        if 'subrole' in search:
            s.append('["=", ["fact", "%s"], "%s"]' % (opt.subrole_fact, search['subrole']))
        query = "['and', %s]" % (', '.join(s))

        payload = {
          'query':         json.dumps(eval(query)),
        }
        if opt.debug: print query


    except SyntaxError:
        p.error('Malformed query, check examples for help')

    headers = {'Accept': 'application/json'}
    try:
        url = "%s%s" % ( opt.server, opt.nodes_url_base )
        if opt.debug: print url
        r = requests.get(url, headers=headers, params=payload,
            cert=requestCert(url), verify=False)
        text = []
        for node in r.json():
            text.append(node['name'])

        for i in sorted(text): print i

    except Exception, e:
        p.error(e)
    except:
        p.error('bad json?: %s' % payload)

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-farmlet - generate a list of hosts based on zone/role/subrole

=head1 SYNOPSYS

B<puppetdb-farmlet> ssi

B<puppetdb-farmlet> ssi rexcons

B<puppetdb-farmlet> ssi rexcons cmk

=head1 USAGE

puppetdb-farmlet queries the puppetdb to find hosts with the matching
zone/role/subrole.  The list of hostnames is then printed to STDOUT.

=head1 OPTIONS

=over 4

=item I<ZONE> (I<ROLE> (I<SUBROLE>))

Zone, role, and subrole to search.  These are the three fields that we
use to categorize our hosts.

=item --zone_fact I<string>

Override the 'zone_fact' fact.  Default is 'enc_zone'.

=item --role_fact I<string>

Override the 'role_fact' fact.  Default is 'enc_role'.

=item --subrole_fact I<string>

Override the 'subrole_fact' fact.  Default is 'enc_subrole'.

=item --help

Prints some short help documentation and exits.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2016, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.

=cut

"""
