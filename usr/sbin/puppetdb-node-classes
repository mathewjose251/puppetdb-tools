#!/usr/bin/python

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/puppetdb/puppetdb.json'

output_string = "%-25s %s: %s"

#########################################################################
### Declarations ########################################################
#########################################################################

from datetime import datetime, timedelta
import dateutil.parser, dateutil.tz
import json, optparse, re, requests, sys

## this isn't ideal, but until I actually start verifying the cert this
## is the best I can do
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

#########################################################################
### Subroutines #########################################################
#########################################################################

def parseConfig(file):
    """
    Load a json configuration from a configuration file.  Sets a global
    'config' variable.
    """
    global config

    try:
        config = json.load(open(config_file, 'r'))
    except IOError, e:
        print "file error:  %s" % e
        sys.exit (2)
    except Exception, e:
        print "unknown error:  %s" % e
        sys.exit (2)

    return config

def requestCert(url):
    """
    If the URL is https, then we will need to pass config['cert'] and
    config['key'].
    """
    if re.match('^https:', url):
        r = (config['cert'], config['key'])
    else:
        r = ()

    return r

#########################################################################
### main () #############################################################
#########################################################################

def main():
    usage = "%prog [options] HOSTNAME"
    parseConfig(config_file)

    global p
    p = optparse.OptionParser (usage = usage,
        description = "query puppetdb for classes on a given host")
    p.add_option ('--server', dest='server', default=config['server'],
        help="puppetdb server (default: %default)")
    p.add_option ('--debug', dest='debug', action='store_true', default=False)
    p.add_option ('--classes_url_base', dest='resources_url_base',
        default=config['resources_url_base'],
        help="relative URL to puppetdb for default resources query")

    global opt
    opt, args = p.parse_args()

    if len(args) < 1:
        p.print_help()
        sys.exit(-1)
    else:
        node = args[0]

    query1 = "['=', 'certname', '%s']" % node
    query2 = "['=', 'type', 'Class']"
    query  = "['and', %s, %s]" % (query1, query2)
    try:
        payload = { 'query': json.dumps(eval(query))}
    except SyntaxError:
        p.error('Malformed query, check examples for help')

    if opt.debug: print "query: %s" % payload

    headers = {'Accept': 'application/json'}
    try:
        url = "%s%s" % (opt.server, opt.resources_url_base)
        r = requests.get(url, headers=headers, params=payload,
            cert=requestCert(url), verify=False)
    except Exception, e:
        p.error('%s (bad json?: %s)' % (e, payload))

    if len(r.json()) == 0:
        print "no matches"
        sys.exit(-1)

    for c in r.json():
        print c['title'].lower()
        if opt.debug: print c

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-node-classes - list classes on a per-host basis

=head1 SYNOPSYS

B<puppetdb-node-classes> cmssrv167.fnal.gov

=head1 USAGE

puppetdb-node-classes queries the puppetdb to find all classes deployed on
the given host. The class list is printed to stdout.

=head1 OPTIONS

=over 4

=item I<HOST>

(Exact) host to query.

=item --debug

Prints debugging information as we go.

=item --help

Prints some short help documentation and exits.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

Based in part on https://github.com/JHaals/puppetdb-grep

=head1 COPYRIGHT

Copyright 2013-2016, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
