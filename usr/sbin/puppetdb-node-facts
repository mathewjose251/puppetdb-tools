#!/usr/bin/python

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/puppetdb/puppetdb.json'

output_string = "%-25s %s: %s"

#########################################################################
### Declarations ########################################################
#########################################################################

from datetime import datetime, timedelta
import dateutil.parser, dateutil.tz
import json, optparse, requests, sys

#########################################################################
### Subroutines #########################################################
#########################################################################

def parseConfig(file):
    """
    Load a json configuration from a configuration file.  Sets a global
    'config' variable.
    """
    global config

    try:
        config = json.load(open(config_file, 'r'))
    except IOError, e:
        print "file error:  %s" % e
        sys.exit (2)
    except Exception, e:
        print "unknown error:  %s" % e
        sys.exit (2)

    return config

def node_facts(node):
    """
    """

    nodes_url = "%s%s" % (opt.server, opt.nodes_url_base)
    url = "%s/%s/facts" % (nodes_url, node)
    headers = { 'Accept': 'application/json' }

    r = requests.get(url, headers=headers, verify=False)
    try:
        r = requests.get(url, headers=headers, verify=False)
    except Exception, e:
        raise Exception('%s (bad url?: %s)' % (e, url))

    facts = {}
    for fact in r.json():
        name = fact['name']
        facts[name] = fact['value']

    return facts

#########################################################################
### main () #############################################################
#########################################################################

def main():
    usage = "%prog [options] [HOSTPATTERN]"
    parseConfig(config_file)

    global p
    p = optparse.OptionParser (usage = usage,
        description = "query puppetdb for facts from matching hosts")
    p.add_option ('--server', dest='server', default=config['server'],
        help="puppetdb server (default: %default)")
    p.add_option ('--nodes_url_base', dest='nodes_url_base',
        default=config['nodes_url_base'],
        help="relative URL to puppetdb for default node query")

    global opt
    opt, args = p.parse_args()

    if len(args) < 1: host_search = '.*'
    else:             host_search = args[0]

    query = "['~', ['fact', 'fqdn'], '^%s$']" % host_search
    try:
        payload = { 'query': json.dumps(eval(query))}
    except SyntaxError:
        p.error('Malformed query, check examples for help')

    headers = {'Accept': 'application/json'}
    try:
        nodes_url = "%s%s" % (opt.server, opt.nodes_url_base)
        r = requests.get(nodes_url, headers=headers, params=payload, verify=False)
    except Exception, e:
        p.error('%s (bad json?: %s)' % (e, payload))

    if len(r.json()) == 0:
        print "no matches"
        sys.exit(-1)

    output = []
    for node in r.json():
        name = node['name']
        facts = node_facts(name)
        for fact in facts.keys():
            string = output_string % (name, fact, facts[fact])
            print string

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-node-facts - list facts on a per-host basis

=head1 SYNOPSYS

B<puppetdb-node-facts> cmssrv167.fnal.gov

B<puppetdb-node-facts> cmssrv'.*'

B<puppetdb-node-facts>

=head1 USAGE

puppetdb-node-facts queries the puppetdb to discover facts about all
matching hosts.  These facts are printed to stdout.

=head1 OPTIONS

=over 4

=item I<HOSTPATTERN>

Default host pattern to match.  Defaults to '.*'; remember that you may
need to escape wild cards if you're using this from the CLI.

=item --help

Prints some short help documentation and exits.

=back

=head1 TODO

Make this more configurable, instead of putting the server in the local
script.

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

Based in part on https://github.com/JHaals/puppetdb-grep

=head1 COPYRIGHT

Copyright 2013, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
