#!/usr/bin/python

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/puppetdb/puppetdb.json'

#########################################################################
### Declarations ########################################################
#########################################################################

from datetime import datetime, timedelta
import dateutil.parser, dateutil.tz
import json, optparse, os, re, requests, sys

## this isn't ideal, but until I actually start verifying the cert this
## is the best I can do
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

#########################################################################
### Subroutines #########################################################
#########################################################################

def parseConfig(file):
    """
    Load a json configuration from a configuration file.  Sets a global
    'config' variable.
    """
    global config

    try:
        config = json.load(open(file, 'r'))
    except IOError, e:
        print "file error:  %s" % e
        sys.exit (2)
    except Exception, e:
        print "unknown error:  %s" % e
        sys.exit (2)

    return config

def requestCert(url):
    """
    If the URL is https, then we will need to pass config['cert'] and
    config['key'].
    """
    if re.match('^https:', url):
        r = (config['cert'], config['key'])
    else:
        r = ()

    return r

def timestamp_from_time(time):
    """
    """
    return time.strftime("%Y-%m-%dT%H:%M:%S%z")

def time_from_timestamp(timestamp):
    """
    Parse a timestamp with dateutil.parser.parse(), and set to the local
    timezone.  This is still usable for date math.
    """
    if timestamp is None:
        return False

    ts = dateutil.parser.parse(timestamp)
    local = ts.astimezone(dateutil.tz.tzlocal())
    return local

def hours_ago(hours):
    """
    """
    time = datetime.now(dateutil.tz.tzlocal()) - timedelta(hours=hours)
    return time

def hostFact(fact):
    """
    Return a hash of name-to-fact values for a given fact.
    """
    query = "['=', 'name', '%s']" % fact
    try:
        payload = { 'query': json.dumps(eval(query))}
    except SyntaxError:
        p.error('Malformed query, check examples for help')

    headers = {'Accept': 'application/json'}
    try:
        url = "%s%s" % ( config['server'], config['facts_url_base'] )
        r = requests.get(url, headers=headers, params=payload,
            cert=requestCert(url), verify=False)
    except Exception, e:
        p.error('%s (bad json?: %s)' % (e, payload))

    if len(r.json()) == 0:
        return {}

    hash = {}
    for node in r.json():
        name = node['certname']
        hash[name] = node['value']

    return hash

def nodesFailed (host_search, opt, p):
    """
    Return a list of hosts that failed.
    """

    url = "%s%s" % ( opt.server, opt.event_counts_url_base )
    try:
        host_query = ['~', 'certname', '^%s$' % host_search ]
        time_query = "['=', 'latest_report?', 'true']"
        query = "['and', %s, %s]" \
            % (host_query, time_query)

        payload = { 
            'query':         json.dumps(eval(query)),
            'summarize_by':  'certname',
            'count_by':      'certname',
            'counts_filter': json.dumps(['>', 'failures', 0 ])
        }
        # support old version of the API
        if re.match(r".*/v3/.*", url):
            payload['summarize-by']  = payload.pop('summarize_by')
            payload['count-by']      = payload.pop('count_by')
            payload['counts-filter'] = payload.pop('counts_filter')
    except SyntaxError:
        p.error('Malformed query, check examples for help')

    headers = {'Accept': 'application/json'}
    try:
        url = "%s%s" % ( opt.server, opt.event_counts_url_base )
        if opt.debug: 
            print "url: %s" % url
            print "payload: %s" % payload
        r = requests.get(url, headers=headers, params=payload,
            cert=requestCert(url), verify=False)
        items = []
        for node in r.json():
            if 'subject' in node:
                items.append(node['subject']['title'])
        return items

    except Exception, e:
        p.error(e)
    except:
        p.error('bad json?: %s' % payload)

#########################################################################
### main () #############################################################
#########################################################################

def main():
    usage = "%prog [options] [HOSTPATTERN]"
    parseConfig(os.getenv('PUPPETDB_CONFIG', config_file))

    global p
    p = optparse.OptionParser (usage = usage,
        description = "query puppetdb for hosts that failed their last run")
    p.add_option ('--debug', dest='debug', action='store_true', default=False)
    p.add_option ('--server', dest='server', default=config['server'],
        help="puppetdb server (default: %default)")
    p.add_option ('--nodes_url_base', dest='nodes_url_base',
        default=config['nodes_url_base'],
        help="relative URL to puppetdb for default node query")
    p.add_option ('--event_counts_url_base', dest='event_counts_url_base',
        default=config['event_counts_url_base'],
        help="relative URL to puppetdb for event counts query")

    global opt
    opt, args = p.parse_args()

    if len(args) < 1:
        host_search = '.*'
    else:
        host_search = args[0]

    failed = nodesFailed (host_search, opt, p)
    if len(failed) == 0:
        sys.exit(0)

    query = "['~', ['fact', 'fqdn'], '^%s$']" % host_search
    try:
        payload = { 'query': json.dumps(eval(query))}
    except SyntaxError:
        p.error('Malformed query, check examples for help')

    headers = {'Accept': 'application/json'}
    try:
        nodes_url = "%s%s" % (opt.server, opt.nodes_url_base)
        if opt.debug: print "url: %s" % nodes_url
        r = requests.get(nodes_url, headers=headers, params=payload,
            cert=requestCert(nodes_url), verify=False)
        items = []
        for node in r.json():
            if 'certname' in node: name = node['certname']
            else:                  name = node['name']
            for i in failed:
                if i == name: items.append(name)
    except:
        p.error ('bad json?: %s' % payload)

    if 'role_fact' in config: role_fact = config['role_fact']
    else:                     role_fact = 'role'

    global roles
    roles = hostFact(role_fact)

    if len(items) > 0:
        for i in sorted(items):
            if i in roles: role = roles[i]
            else:          role = 'unknown'
            print "%-35s %3s %38s" % (i, '', role)

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-failed - list hosts that failed their last puppet checkin

=head1 SYNOPSYS

B<puppetdb-failed>

B<puppetdb-failed> cmssrv.\*.fnal.gov

=head1 USAGE

puppetdb-failed queries the puppetdb to find out which hosts failed on
their last puppet check-in.  The list is printed on STDOUT.  The final
field corresponds to the system fact I<role>, if any.

=head1 OPTIONS

=over 4

=item I<HOSTPATTERN>

Default host pattern to match.  Defaults to '.*'; remember that you may
need to escape wild cards if you're using this from the CLI.

=item --help

Prints some short help documentation and exits.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

Based in part on https://github.com/JHaals/puppetdb-grep

=head1 COPYRIGHT

Copyright 2014-2016, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
