#!/usr/bin/python3

#########################################################################
### Declarations ########################################################
#########################################################################

import json, puppetdb, sys

#########################################################################
### Configuration #######################################################
#########################################################################

output_string = "%-25s %s: %s"

## Text for --help
help_text = "query puppetdb for classes on a given host"
usage_text = "usage: %prog [options] HOSTNAME"

#########################################################################
### main () #############################################################
#########################################################################

def main():
    p = puppetdb.generateParser(help_text, usage_text)
    opt, args = p.parse_args()

    if len(args) < 1:
        p.print_help()
        sys.exit(-1)
    else:
        node = args[0]

    query1 = "['=', 'certname', '%s']" % node
    query2 = "['=', 'type', 'Class']"
    query  = "['and', %s, %s]" % (query1, query2)
    try:
        payload = { 'query': json.dumps(eval(query))}
    except SyntaxError:
        p.error('Malformed query, check examples for help')

    if opt.debug: print("query: %s" % payload)

    headers = {'Accept': 'application/json'}
    try:
        url = puppetdb.generateUrl('resources', opt)
        r = puppetdb.request(url, headers=headers, params=payload)
    except Exception as e:
        p.error('%s (bad json?: %s)' % (e, payload))

    if len(r.json()) == 0:
        print("no matches")
        sys.exit(-1)

    for c in r.json():
        print(c['title'].lower())
        if opt.debug: print(c)

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-node-classes - list classes on a per-host basis

=head1 SYNOPSYS

B<puppetdb-node-classes> cmssrv167.fnal.gov

=head1 USAGE

puppetdb-node-classes queries the puppetdb to find all classes deployed on
the given host. The class list is printed to stdout.

Should support both v3 and v4 PuppetDB APIs.

=head1 OPTIONS

=over 4

=item I<HOST>

(Exact) host to query.

=item --debug

Prints debugging information as we go.

=item --help

Prints some short help documentation and exits.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

Based in part on https://github.com/JHaals/puppetdb-grep

=head1 COPYRIGHT

Copyright 2013-2016, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
