#!/usr/bin/python3

#########################################################################
### Declarations ########################################################
#########################################################################

import puppetdb, sys

#########################################################################
### Configuration #######################################################
#########################################################################

## Text for --help
help_text = "query puppetdb for hosts that failed their last run, with reasons"
usage_text = "usage: %prog [options] [HOSTPATTERN]"

#########################################################################
### main () #############################################################
#########################################################################

def main():
    p = puppetdb.generateParser(help_text, usage_text)
    p.add_option ('--text', dest='text', action='store', 
        default='.*', help='text to match; default: \'%default\'')
    p.add_option ('--short', dest='short', action='store_true',
        default=False, help='only print the node names; default: %default')
    opt, args = p.parse_args()

    if len(args) < 1:   host_search = '.*'
    else:               host_search = args[0]

    failed = puppetdb.nodesFailed (host_search, opt)
    if len(failed) == 0: sys.exit(0)

    nodes = puppetdb.nodesList(host_search, opt)

    for i in sorted(failed):
        if i in nodes:
            failures = puppetdb.hostFailedWhy(i, opt)
            if len(failures) > 0:
                if opt.short: print(i)
                else:
                    print("Node %s - %d failure%s" % (i, len(failures),
                        ('s' if len(failures) != 1 else '') ))
                    for j in failures:
                        print("  %s" % j)
                    print("")

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-failed-list - list events that failed, on a per-host basis

=head1 SYNOPSYS

B<puppetdb-failed-list>

B<puppetdb-failed-list> cmssrv.\*.fnal.gov

=head1 USAGE

puppetdb-failed-list queries the puppetdb to find hosts which had a
failure in their last run, and reports on each of those failures to
STDOUT.

The list of associated events is printed on STDOUT, in the format:

    Node foo.fnal.gov - 2 failures
      Facter - error while processing "/opt/puppetlabs/facter/facts.d/snow.sh" for external facts: child process returned non-zero exit status (-1).
      /Stage[main]/P_mount/P_mount::Mount[bar]/Mount[/baz] - Could not evaluate: Execution of '/bin/mount /baz' returned 32: mount.nfs: access denied by server while mounting bar:/baz

Should support both v3 and v4 PuppetDB APIs.

=head1 OPTIONS

=over 4

=item I<HOSTPATTERN>

Default host pattern to match.  Defaults to '.*'; remember that you may
need to escape wild cards if you're using this from the CLI.

=item --text I<PATTERN>

Only match errors with this text pattern.  Default is I<'.*'>.

=item --help

Prints some short help documentation and exits.

=item --short

Don't print the text about the problems, just print the hostnames; helpful
for scripting.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

Based in part on https://github.com/JHaals/puppetdb-grep

=head1 COPYRIGHT

Copyright 2014-2018, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.

=cut

"""
