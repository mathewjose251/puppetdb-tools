#!/usr/bin/python3

#########################################################################
### Declarations ########################################################
#########################################################################

from datetime import datetime, timedelta
import dateutil.parser, dateutil.tz, puppetdb, sys

#########################################################################
### Configuration #######################################################
#########################################################################

hours = 168
output_string = "%-30s %23s %23s"

## Text for --help
help_text = "query puppetdb for host last successful run"
usage_text = "usage: %prog [options] [HOSTPATTERN]"

#########################################################################
### Subroutines #########################################################
#########################################################################

def tooOld(timestamp, hours):
    """
    Given a timestamp and a number of hours, returns True if the timestamp
    is > hours old, or False otherwise.
    """
    ts = puppetdb.timeFromTimestamp(timestamp)
    if ts is False: return True

    now = datetime.now(dateutil.tz.tzlocal())
    delta = timedelta(hours=hours)

    diff = now - ts
    if diff > delta: return True
    else:            return False

def node_print(node, timestamp):
    """
    Create a human-readable string saying how long it's been since a node
    has checked in.
    """
    name = node

    if name in roles: role = roles[name]
    else:             role = 'unknown'

    if timestamp is False:
        ts_string = "**no puppetdb records**"
    else:
        ts_string = timestamp.strftime("%Y-%m-%d %H:%M:%S %Z")

    return output_string % (name, ts_string, role)

#########################################################################
### main () #############################################################
#########################################################################

def main():
    p = puppetdb.generateParser(help_text, usage_text)
    p.add_option ('--hours', dest='hours', default=hours, type='int',
        help='how many hours is "too many"?  default: %default')
    opt, args = p.parse_args()

    global roles
    roles = puppetdb.hostRoles(opt)

    items = []
    for node in puppetdb.nodesFailed('.*', opt):
        reports = puppetdb.reportsPerHost(node, opt)
        mostRecent = False
        for i in reversed(sorted(reports.keys())):
            id = reports[i]['hash']
            if not tooOld(i, opt.hours):
                success = puppetdb.eventSuccessByReport(id, opt)
                if success:
                    mostRecent = puppetdb.timeFromTimestamp(i)
                    break

        items.append(node_print(node, mostRecent))

    if len(items) > 0:
        for i in items: print(i)

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-last-successful-run - timestamp of the last-successful-run of failed puppet hosts

=head1 SYNOPSYS

B<puppetdb-last-successful-run>

B<puppetdb-last-successful-run> --hours 48

=head1 USAGE

puppetdb-last-successful-run queries the puppetdb to find out which hosts
did not succeed on their last puppet run and, for each of those hosts,
determines when their last successful run *was*.  The list is printed to
STDOUT.

Should support both v3 and v4 PuppetDB APIs.

=head1 OPTIONS

=over 4

=item --hours I<HOURS>

How far back are we willing to look?  Defaults to 168 hours (1 week);
smaller times will improve script performance.  Note that the puppetdb
tends to purge reports after 2 weeks.

=item --help

Prints some short help documentation and exits.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2016, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
