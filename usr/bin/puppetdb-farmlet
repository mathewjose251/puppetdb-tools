#!/usr/bin/python3

#########################################################################
### Declarations ########################################################
#########################################################################

import json, puppetdb, sys

#########################################################################
### Configuration #######################################################
#########################################################################

help_text = "query puppetdb for hosts by zone/role/subrole"
usage_text = "usage: %prog [options] ZONE [ROLE [SUBROLE]]"

#########################################################################
### main () #############################################################
#########################################################################

def main():

    p = puppetdb.generateParser(help_text, usage_text)
    p.add_option ('--zone_fact', dest='zone_fact', default='enc_zone',
        help="name of the zone fact (default: %default)")
    # role_fact comes from upstream
    p.add_option ('--subrole_fact', dest='subrole_fact', default='enc_subrole',
        help="name of the subrole fact (default: %default)")
    opt, args = p.parse_args()

    search = {}
    if len(args) == 0:
       p.print_help()
       sys.exit(-1)
    elif len(args) <= 3:
       if len(args) >= 1: search['zone']    = args[0]
       if len(args) >= 2: search['role']    = args[1]
       if len(args) >= 3: search['subrole'] = args[2]
    else:
       p.print_help()
       sys.exit(-1)

    try:
        s = []
        if 'zone' in search:
            s.append('["=", ["fact", "%s"], "%s"]' % \
                (opt.zone_fact, search['zone']))
        if 'role' in search:
            s.append('["=", ["fact", "%s"], "%s"]' % \
                (opt.role_fact, search['role']))
        if 'subrole' in search:
            s.append('["=", ["fact", "%s"], "%s"]' % \
                (opt.subrole_fact, search['subrole']))
        query = "['and', %s]" % (', '.join(s))

        payload = { 'query': json.dumps(eval(query)), }
        if opt.debug: print(query)

    except SyntaxError:
        p.error('Malformed query, check examples for help')

    headers = {'Accept': 'application/json'}
    url = puppetdb.generateUrl('nodes', opt)
    if opt.debug:
        print("url: %s\nquery: %s" % (url, query))

    try:
        r = puppetdb.request(url, headers=headers, params=payload)
        text = []
        for node in r.json():
            if 'certname' in node: text.append(node['certname'])
            else:                  text.append(node['name'])

        for i in sorted(text): print(i)

    except Exception as e:
        p.error(e)
    except:
        p.error('bad json?: %s' % payload)

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################
## We use this to generate man pages.

"""

=head1 NAME

puppetdb-farmlet - generate a list of hosts based on zone/role/subrole

=head1 SYNOPSYS

B<puppetdb-farmlet> ssi

B<puppetdb-farmlet> ssi rexcons

B<puppetdb-farmlet> ssi rexcons cmk

=head1 USAGE

puppetdb-farmlet queries the puppetdb to find hosts with the matching
zone/role/subrole.  The list of hostnames is then printed to STDOUT.

Should support both v3 and v4 PuppetDB APIs.

=head1 OPTIONS

=over 4

=item I<ZONE> (I<ROLE> (I<SUBROLE>))

Zone, role, and subrole to search.  These are the three fields that we
use to categorize our hosts.

=item --zone_fact I<string>

Override the 'zone_fact' fact.  Default is 'enc_zone'.

=item --role_fact I<string>

Override the 'role_fact' fact.  Default is 'enc_role'.

=item --subrole_fact I<string>

Override the 'subrole_fact' fact.  Default is 'enc_subrole'.

=item --help

Prints some short help documentation and exits.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2016, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.

=cut

"""
